-*- Mode: lisp -*-

CPLErr GDALAddDerivedBandPixelFunc


 This adds a pixel function to the global list of available pixel
 functions for derived bands.

 Pixel functions must be registered in this way before a derived band
 tries to access data.

 Derived bands are stored with only the name of the pixel function
 that it will apply, and if a pixel function matching the name is not
 found the IRasterIO() call will do nothing.

Parameters:	pszFuncName 	Name used to access pixel function
	pfnNewFunction 	Pixel function associated with name. An existing pixel function registered with the same name will be replaced with the new one.

@return{CE_None, invalid (NULL) parameters are currently ignored.
(	const char * 	pszFuncName,
		GDALDerivedPixelFunc 	pfnNewFunction
	)

;; --------------------------------------------------------

void GDALApplyGeoTransform


Apply GeoTransform to x/y coordinate.

Applies the following computation, converting a (pixel,line) coordinate into a georeferenced (geo_x,geo_y) location.

*pdfGeoX = padfGeoTransform[0] + dfPixel * padfGeoTransform[1] + dfLine * padfGeoTransform[2]; *pdfGeoY = padfGeoTransform[3] + dfPixel * padfGeoTransform[4] + dfLine * padfGeoTransform[5];
Parameters:	padfGeoTransform 	Six coefficient GeoTransform to apply.
	dfPixel 	Input pixel position.
	dfLine 	Input line position.
	pdfGeoX 	output location where geo_x (easting/longitude) location is placed.
	pdfGeoY 	output location where geo_y (northing/latitude) location is placed.

(	double * 	padfGeoTransform,
		double 	dfPixel,
		double 	dfLine,
		double * 	pdfGeoX,
		double * 	pdfGeoY
	)

;; --------------------------------------------------------

int GDALCheckVersion


Return TRUE if GDAL library version at runtime matches nVersionMajor.nVersionMinor.

The purpose of this method is to ensure that calling code will run with the GDAL version it is compiled for. It is primarly intented for external plugins.
Parameters:	nVersionMajor 	Major version to be tested against
	nVersionMinor 	Minor version to be tested against
	pszCallingComponentName 	If not NULL, in case of version mismatch, the method will issue a failure mentionning the name of the calling component.

@return{TRUE if GDAL library version at runtime matches nVersionMajor.nVersionMinor, FALSE otherwise.
GDALColorTableH GDALCloneColorTable 	(	GDALColorTableH 	hTable	 )


Make a copy of a color table.

This function is the same as the C++ method GDALColorTable::Clone()
(	int 	nVersionMajor,
		int 	nVersionMinor,
		const char * 	pszCallingComponentName
	)

;; --------------------------------------------------------

void GDALCopyBits


Bitwise word copying.

A function for moving sets of partial bytes around. Loosely speaking this is a bitswise analog to GDALCopyWords().

It copies nStepCount \"words\" where each word is nBitCount bits long. The nSrcStep and nDstStep are the number of bits from the start of one word to the next (same as nBitCount if they are packed). The nSrcOffset and nDstOffset are the offset into the source and destination buffers to start at, also measured in bits.

All bit offsets are assumed to start from the high order bit in a byte (ie. most significant bit first). Currently this function is not very optimized, but it may be improved for some common cases in the future as needed.
Parameters:	pabySrcData 	the source data buffer.
	nSrcOffset 	the offset (in bits) in pabySrcData to the start of the first word to copy.
	nSrcStep 	the offset in bits from the start one source word to the start of the next.
	pabyDstData 	the destination data buffer.
	nDstOffset 	the offset (in bits) in pabyDstData to the start of the first word to copy over.
	nDstStep 	the offset in bits from the start one word to the start of the next.
	nBitCount 	the number of bits in a word to be copied.
	nStepCount 	the number of words to copy.
(	const GByte * 	pabySrcData,
		int 	nSrcOffset,
		int 	nSrcStep,
		GByte * 	pabyDstData,
		int 	nDstOffset,
		int 	nDstStep,
		int 	nBitCount,
		int 	nStepCount
	)

;; --------------------------------------------------------

CPLErr GDALCopyDatasetFiles


Copy the files of a dataset.
See also:
GDALDriver::CopyFiles()
(	GDALDriverH 	hDriver,
		const char * 	pszNewName,
		const char * 	pszOldName
	)

;; --------------------------------------------------------

void GDALCopyWords


Copy pixel words from buffer to buffer.

 This function is used to copy pixel word values from one memory
 buffer to another, with support for conversion between data types,
 and differing step factors. The data type conversion is done using
 the normal GDAL rules. Values assigned to a lower range integer type
 are clipped. For instance assigning GDT_Int16 values to a GDT_Byte
 buffer will cause values less the 0 to be set to 0, and values larger
 than 255 to be set to 255. Assignment from floating point to integer
 uses default C type casting semantics. Assignment from non-complex to
 complex will result in the imaginary part being set to zero on
 output. Assigment from complex to non-complex will result in the
 complex portion being lost and the real component being
 preserved (not magnitidue!).

 No assumptions are made about the source or destination words
 occuring on word boundaries. It is assumed that all values are in
 native machine byte order.

Parameters:	pSrcData 	Pointer to source data to be converted.
	eSrcType 	the source data type (see GDALDataType enum)
	nSrcPixelOffset 	Source pixel offset, in bytes
	pDstData 	Pointer to buffer where destination data should go
	eDstType 	the destination data type (see GDALDataType enum)
	nDstPixelOffset 	Destination pixel offset, in bytes
	nWordCount 	number of words to be copied

 Note: When adding a new data type to GDAL, you must do the following
 to support it properly within the GDALCopyWords function: 1. Add the
 data type to the switch on eSrcType in GDALCopyWords. This should
 invoke the appropriate GDALCopyWordsFromT wrapper. 2. Add the data
 type to the switch on eDstType in GDALCopyWordsFromT. This should
 call the appropriate GDALCopyWordsT template. 3. If appropriate,
 overload the appropriate CopyWord template in the above
 namespace. This will ensure that any conversion issues are
 handled (cases like the float -> int32 case, where the min/max)
 values are subject to roundoff error.

(	void * 	pSrcData,
		GDALDataType 	eSrcType,
		int 	nSrcPixelOffset,
		void * 	pDstData,
		GDALDataType 	eDstType,
		int 	nDstPixelOffset,
		int 	nWordCount
	)

;; --------------------------------------------------------

GDALDatasetH GDALCreate


Create a new dataset with this driver.
See also:
GDALDriver::Create()
(	GDALDriverH 	hDriver,
		const char * 	pszFilename,
		int 	nXSize,
		int 	nYSize,
		int 	nBands,
		GDALDataType 	eBandType,
		char ** 	papszOptions
	)

;; --------------------------------------------------------

void GDALCreateColorRamp


Create color ramp.

This function is the same as the C++ method GDALColorTable::CreateColorRamp()
(	GDALColorTableH 	hTable,
		int 	nStartIndex,
		const GDALColorEntry * 	psStartColor,
		int 	nEndIndex,
		const GDALColorEntry * 	psEndColor
	)

;; --------------------------------------------------------

GDALColorTableH GDALCreateColorTable


Construct a new color table.

This function is the same as the C++ method GDALColorTable::GDALColorTable()
(	GDALPaletteInterp 	eInterp	 )

;; --------------------------------------------------------

GDALDatasetH GDALCreateCopy 	


Create a copy of a dataset.
See also:
GDALDriver::CreateCopy()
(	GDALDriverH 	hDriver,
		const char * 	pszFilename,
		GDALDatasetH 	hSrcDS,
		int 	bStrict,
		char ** 	papszOptions,
		GDALProgressFunc 	pfnProgress,
		void * 	pProgressData
	)

;; --------------------------------------------------------

GDALRasterAttributeTableH GDALCreateRasterAttributeTable 	


Construct empty table.

 This function is the same as the C++ method
 GDALDefaultRasterAttributeTable::GDALDefaultRasterAttributeTable()

(	void 		 )

;; --------------------------------------------------------

int GDALDataTypeIsComplex


Is data type complex?
@return{TRUE if the passed type is complex (one of GDT_CInt16, GDT_CInt32, GDT_CFloat32 or GDT_CFloat64), that is it consists of a real and imaginary component.

(	GDALDataType 	eDataType	 )

;; --------------------------------------------------------

GDALDataType GDALDataTypeUnion


Return the smallest data type that can fully express both input data types.


Parameters:	eType1 	first data type.
	eType2 	second data type.

@return{a data type able to express eType1 and eType2.

(	GDALDataType 	eType1,
		GDALDataType 	eType2
	)
;; --------------------------------------------------------

double GDALDecToPackedDMS


Convert decimal degrees into packed DMS value (DDDMMMSSS.SS).

See CPLDecToPackedDMS().
(	double 	dfDec	 )

;; --------------------------------------------------------

CPLErr GDALDeleteDataset


Delete named dataset.
See also:
GDALDriver::Delete()
(	GDALDriverH 	hDriver,
		const char * 	pszFilename
	)

;; --------------------------------------------------------

void GDALDeregisterDriver


Deregister the passed driver.
See also:
GDALDriverManager::GetDeregisterDriver()
(	GDALDriverH 	hDriver	 )

;; --------------------------------------------------------

void GDALDestroyColorTable


Destroys a color table.

This function is the same as the C++ method GDALColorTable::~GDALColorTable()
(	GDALColorTableH 	hTable	 )

;; --------------------------------------------------------

void GDALDestroyDriver


Destroy a GDALDriver.

 This is roughly equivelent to deleting the driver, but is guaranteed
 to take place in the GDAL heap. It is important this that function
 not be called on a driver that is registered with the
 GDALDriverManager.

Parameters:	hDriver 	the driver to destroy.
(	GDALDriverH 	hDriver	 )

;; --------------------------------------------------------

void GDALDestroyDriverManager


Destroy the driver manager.

Incidently unloads all managed drivers.

NOTE: This function is not thread safe. It should not be called while other threads are actively using GDAL.
(	void 		 )

;; --------------------------------------------------------

void GDALDestroyRasterAttributeTable


Destroys a RAT.

This function is the same as the C++ method GDALRasterAttributeTable::~GDALRasterAttributeTable()
(	GDALRasterAttributeTableH 	hRAT	 )

;; --------------------------------------------------------

int GDALDumpOpenDatasets


List open datasets.

 Dumps a list of all open datasets (shared or not) to the indicated
 text file (may be stdout or stderr). This function is primarily
 intended to assist in debugging \"dataset leaks\" and reference
 counting issues. The information reported includes the dataset name,
 referenced count, shared status, driver name, size, and band count.

(	FILE * 	fp	 )

;; --------------------------------------------------------

int GDALFlushCacheBlock


Try to flush one cached raster block.

This function will search the first unlocked raster block and will flush it to release the associated memory.
@return{TRUE if one block was flushed, FALSE if there are no cached blocks or if they are currently locked.
(	void 		 )

;; --------------------------------------------------------

int GDALGCPsToGeoTransform


Generate Geotransform from GCPs.

Given a set of GCPs perform first order fit as a geotransform.

Due to imprecision in the calculations the fit algorithm will often return non-zero rotational coefficients even if given perfectly non-rotated inputs. A special case has been implemented for corner corner coordinates given in TL, TR, BR, BL order. So when using this to get a geotransform from 4 corner coordinates, pass them in this order.
Parameters:	nGCPCount 	the number of GCPs being passed in.
	pasGCPs 	the list of GCP structures.
	padfGeoTransform 	the six double array in which the affine geotransformation will be returned.
	bApproxOK 	If FALSE the function will fail if the geotransform is not essentially an exact fit (within 0.25 pixel) for all GCPs.

@return{TRUE on success or FALSE if there aren't enough points to prepare a geotransform, the pointers are ill-determined or if bApproxOK is FALSE and the fit is poor.
(	int 	nGCPCount,
		const GDAL_GCP * 	pasGCPs,
		double * 	padfGeoTransform,
		int 	bApproxOK
	)

;; --------------------------------------------------------

int GDALGeneralCmdLineProcessor


General utility option processing.

This function is intended to provide a variety of generic commandline options for all GDAL commandline utilities. It takes care of the following commandline options:

--version: report version of GDAL in use. --build: report build info about GDAL in use. --license: report GDAL license info. --formats: report all format drivers configured. --format [format]: report details of one format driver. --optfile filename: expand an option file into the argument list. --config key value: set system configuration option. --debug [on/off/value]: set debug level. --mempreload dir: preload directory contents into /vsimem --pause: Pause for user input (allows time to attach debugger) --locale [locale]: Install a locale using setlocale() (debugging) --help-general: report detailed help on general options.

The argument array is replaced \"in place\" and should be freed with CSLDestroy() when no longer needed. The typical usage looks something like the following. Note that the formats should be registered so that the --formats and --format options will work properly.

int main( int argc, char ** argv ) { GDALAllRegister();

argc = GDALGeneralCmdLineProcessor( argc, &argv, 0 ); if( argc < 1 ) exit( -argc );
Parameters:	nArgc 	number of values in the argument list.
	ppapszArgv 	pointer to the argument list array (will be updated in place).
	nOptions 	unused for now.

@return{updated nArgc argument count. Return of 0 requests terminate without error, return of -1 requests exit with error code.
(	int 	nArgc,
		char *** 	ppapszArgv,
		int 	nOptions
	)

;; --------------------------------------------------------

GDALAsyncStatusType GDALGetAsyncStatusTypeByName


Get AsyncStatusType by symbolic name.

Returns a data type corresponding to the given symbolic name. This function is opposite to the GDALGetAsyncStatusTypeName().
Parameters:	pszName 	string containing the symbolic name of the type.

@return{GDAL AsyncStatus type.
(	const char * 	pszName	 )

;; --------------------------------------------------------

const char* GDALGetAsyncStatusTypeName


Get name of AsyncStatus data type.

Returns a symbolic name for the AsyncStatus data type. This is essentially the the enumerated item name with the GARIO_ prefix removed. So GARIO_COMPLETE returns \"COMPLETE\". The returned strings are static strings and should not be modified or freed by the application. These strings are useful for reporting datatypes in debug statements, errors and other user output.
Parameters:	eAsyncStatusType 	type to get name of.

@return{string corresponding to type.
(	GDALAsyncStatusType 	eAsyncStatusType	 )

;; --------------------------------------------------------

int GDALGetCacheMax


Get maximum cache memory.

Gets the maximum amount of memory available to the GDALRasterBlock caching system for caching GDAL read/write imagery.

The first type this function is called, it will read the GDAL_CACHEMAX configuation option to initialize the maximum cache memory.

This function cannot return a value higher than 2 GB. Use GDALGetCacheMax64() to get a non-truncated value.
@return{maximum in bytes.
(	void 		 )

;; --------------------------------------------------------

GIntBig GDALGetCacheMax64


Get maximum cache memory.

Gets the maximum amount of memory available to the GDALRasterBlock caching system for caching GDAL read/write imagery.

The first type this function is called, it will read the GDAL_CACHEMAX configuation option to initialize the maximum cache memory.
@return{maximum in bytes.
Since:
GDAL 1.8.0
(	void 		 )

;; --------------------------------------------------------

int GDALGetCacheUsed


Get cache memory used.
@return{the number of bytes of memory currently in use by the GDALRasterBlock memory caching.
(	void 		 )

;; --------------------------------------------------------

GIntBig GDALGetCacheUsed64


Get cache memory used.
@return{the number of bytes of memory currently in use by the GDALRasterBlock memory caching.
Since:
GDAL 1.8.0
(	void 		 )

;; --------------------------------------------------------

const GDALColorEntry* GDALGetColorEntry


Fetch a color entry from table.

This function is the same as the C++ method GDALColorTable::GetColorEntry()
(	GDALColorTableH 	hTable,
		int 	i
	)

;; --------------------------------------------------------

int GDALGetColorEntryAsRGB


Fetch a table entry in RGB format.

This function is the same as the C++ method GDALColorTable::GetColorEntryAsRGB()
(	GDALColorTableH 	hTable,
		int 	i,
		GDALColorEntry * 	poEntry
	)

;; --------------------------------------------------------

int GDALGetColorEntryCount


Get number of color entries in table.

This function is the same as the C++ method GDALColorTable::GetColorEntryCount()
(	GDALColorTableH 	hTable	 )

;; --------------------------------------------------------

GDALColorInterp GDALGetColorInterpretationByName


Get color interpreation by symbolic name.

Returns a color interpreation corresponding to the given symbolic name. This function is opposite to the GDALGetColorInterpretationName().
Parameters:	pszName 	string containing the symbolic name of the color interpretation.

@return{GDAL color interpretation.
Since:
GDAL 1.7.0
(	const char * 	pszName	 )

;; --------------------------------------------------------

const char* GDALGetColorInterpretationName


Get name of color interpretation.

 Returns a symbolic name for the color interpretation. This is derived
 from the enumerated item name with the GCI_ prefix removed, but there
 are some variations. So GCI_GrayIndex returns \"Gray\" and GCI_RedBand
 returns \"Red\". The returned strings are static strings and should not
 be modified or freed by the application.

Parameters:	eInterp 	color interpretation to get name of.

@return{string corresponding to color interpretation or NULL pointer if invalid enumerator given.
(	GDALColorInterp 	eInterp	 )

;; --------------------------------------------------------

GDALDataType GDALGetDataTypeByName


Get data type by symbolic name.

Returns a data type corresponding to the given symbolic name. This function is opposite to the GDALGetDataTypeName().
Parameters:	pszName 	string containing the symbolic name of the type.

@return{GDAL data type.
(	const char * 	pszName	 )

;; --------------------------------------------------------

const char* GDALGetDataTypeName


Get name of data type.

 Returns a symbolic name for the data type. This is essentially the
 the enumerated item name with the GDT_ prefix removed. So GDT_Byte
 returns \"Byte\". The returned strings are static strings and should
 not be modified or freed by the application. These strings are useful
 for reporting datatypes in debug statements, errors and other user
 output.

Parameters:	eDataType 	type to get name of.

@return{string corresponding to existing data type or NULL pointer if invalid type given.
(	GDALDataType 	eDataType	 )

;; --------------------------------------------------------

int GDALGetDataTypeSize


Get data type size in bits.

Returns the size of a a GDT_* type in bits, not bytes!
Parameters:	eDataType 	type, such as GDT_Byte.

@return{the number of bits or zero if it is not recognised.
(	GDALDataType 	eDataType	 )

;; --------------------------------------------------------

const char* GDALGetDescription


Fetch object description.
See also:
GDALMajorObject::GetDescription()
(	GDALMajorObjectH 	hObject	 )

;; --------------------------------------------------------

GDALDriverH GDALGetDriver


Fetch driver by index.
See also:
GDALDriverManager::GetDriver()
(	int 	iDriver	 )

;; --------------------------------------------------------

GDALDriverH GDALGetDriverByName


Fetch a driver based on the short name.
See also:
GDALDriverManager::GetDriverByName()
(	const char * 	pszName	 )

;; --------------------------------------------------------

int GDALGetDriverCount


Fetch the number of registered drivers.
See also:
GDALDriverManager::GetDriverCount()
(	void 		 )

;; --------------------------------------------------------

const char* GDALGetDriverCreationOptionList


Return the list of creation options of the driver.

Return the list of creation options of the driver used by Create() and CreateCopy() as an XML string
Parameters:	hDriver 	the handle of the driver

@return{an XML string that describes the list of creation options or empty string. The returned string should not be freed and is owned by the driver.
(	GDALDriverH 	hDriver	 )

;; --------------------------------------------------------

const char* GDALGetDriverHelpTopic


Return the URL to the help that describes the driver.

That URL is relative to the GDAL documentation directory.

For the GeoTIFF driver, this is \"frmt_gtiff.html\"
Parameters:	hDriver 	the handle of the driver

@return{the URL to the help that describes the driver or NULL. The returned string should not be freed and is owned by the driver.
(	GDALDriverH 	hDriver	 )

;; --------------------------------------------------------

const char* GDALGetDriverLongName


Return the long name of a driver.

For the GeoTIFF driver, this is \"GeoTIFF\"
Parameters:	hDriver 	the handle of the driver

@return{the long name of the driver or empty string. The returned string should not be freed and is owned by the driver.
(	GDALDriverH 	hDriver	 )

;; --------------------------------------------------------

const char* GDALGetDriverShortName


Return the short name of a driver.

This is the string that can be passed to the GDALGetDriverByName() function.

For the GeoTIFF driver, this is \"GTiff\"
Parameters:	hDriver 	the handle of the driver

@return{the short name of the driver. The returned string should not be freed and is owned by the driver.
(	GDALDriverH 	hDriver	 )

;; --------------------------------------------------------

char** GDALGetMetadata


Fetch metadata.
See also:
GDALMajorObject::GetMetadata()
(	GDALMajorObjectH 	hObject,
		const char * 	pszDomain
	)

;; --------------------------------------------------------

const char* GDALGetMetadataItem


Fetch single metadata item.
See also:
GDALMajorObject::GetMetadataItem()
(	GDALMajorObjectH 	hObject,
		const char * 	pszName,
		const char * 	pszDomain
	)

;; --------------------------------------------------------

GDALPaletteInterp GDALGetPaletteInterpretation


Fetch palette interpretation.

This function is the same as the C++ method GDALColorTable::GetPaletteInterpretation()
(	GDALColorTableH 	hTable	 )

;; --------------------------------------------------------

const char* GDALGetPaletteInterpretationName


Get name of palette interpretation.

 Returns a symbolic name for the palette interpretation. This is the
 the enumerated item name with the GPI_ prefix removed. So GPI_Gray
 returns \"Gray\". The returned strings are static strings and should
 not be modified or freed by the application.

Parameters:	eInterp 	palette interpretation to get name of.

@return{string corresponding to palette interpretation.
(	GDALPaletteInterp 	eInterp	 )

;; --------------------------------------------------------

GDALDriverH GDALIdentifyDriver


Identify the driver that can open a raster file.

This function will try to identify the driver that can open the passed file name by invoking the Identify method of each registered GDALDriver in turn. The first driver that successful identifies the file name will be returned. If all drivers fail then NULL is returned.

 In order to reduce the need for such searches touch the operating
 system file system machinery, it is possible to give an optional list
 of files. This is the list of all files at the same level in the file
 system as the target file, including the target file. The filenames
 will not include any path components, are an essentially just the
 output of CPLReadDir() on the parent directory. If the target object
 does not have filesystem semantics then the file list should be NULL.

Parameters:	pszFilename 	the name of the file to access. In the case of exotic drivers this may not refer to a physical file, but instead contain information for the driver on how to access a dataset.
	papszFileList 	an array of strings, whose last element is the NULL pointer. These strings are filenames that are auxiliary to the main filename. The passed value may be NULL.

@return{A GDALDriverH handle or NULL on failure. For C++ applications this handle can be cast to a GDALDriver *.
(	const char * 	pszFilename,
		char ** 	papszFileList
	)

;; --------------------------------------------------------

int GDALInvGeoTransform


Invert Geotransform.

This function will invert a standard 3x2 set of GeoTransform coefficients. This converts the equation from being pixel to geo to being geo to pixel.
Parameters:	gt_in 	Input geotransform (six doubles - unaltered).
	gt_out 	Output geotransform (six doubles - updated).

@return{TRUE on success or FALSE if the equation is uninvertable.
(	double * 	gt_in,
		double * 	gt_out
	)

;; --------------------------------------------------------

int GDALLoadWorldFile


Read ESRI world file.

This function reads an ESRI style world file, and formats a geotransform from its contents.

The world file contains an affine transformation with the parameters in a different order than in a geotransform array.
 geotransform[1] : width of pixel
 geotransform[4] : rotational coefficient, zero for north up images.
 geotransform[2] : rotational coefficient, zero for north up images.
 geotransform[5] : height of pixel (but negative)
 geotransform[0] + 0.5 * geotransform[1] + 0.5 * geotransform[2] : x offset to center of top left pixel.
 geotransform[3] + 0.5 * geotransform[4] + 0.5 * geotransform[5] : y offset to center of top left pixel.
Parameters:	pszFilename 	the world file name.
	padfGeoTransform 	the six double array into which the geotransformation should be placed.

@return{TRUE on success or FALSE on failure.
(	const char * 	pszFilename,
		double * 	padfGeoTransform
	)

;; --------------------------------------------------------

double GDALPackedDMSToDec


Convert a packed DMS value (DDDMMMSSS.SS) into decimal degrees.

See CPLPackedDMSToDec().
(	double 	dfPacked	 )

;; --------------------------------------------------------

CPLErr GDALRasterBandCopyWholeRaster


Copy all raster band raster data.

This function copies the complete raster contents of one band to another similarly configured band. The source and destination bands must have the same width and height. The bands do not have to have the same data type.

It implements efficient copying, in particular \"chunking\" the copy in substantial blocks.

Currently the only papszOptions value supported is : \"COMPRESSED=YES\" to force alignment on target dataset block sizes to achieve best compression. More options may be supported in the future.
Parameters:	hSrcBand 	the source band
	hDstBand 	the destination band
	papszOptions 	transfer hints in \"StringList\" Name=Value format.
	pfnProgress 	progress reporting function.
	pProgressData 	callback data for progress function.

@return{CE_None on success, or CE_Failure on failure.
(	GDALRasterBandH 	hSrcBand,
		GDALRasterBandH 	hDstBand,
		char ** 	papszOptions,
		GDALProgressFunc 	pfnProgress,
		void * 	pProgressData
	)

;; --------------------------------------------------------

int GDALRATChangesAreWrittenToFile


Determine whether changes made to this RAT are reflected directly in the dataset.

This function is the same as the C++ method GDALRasterAttributeTable::ChangesAreWrittenToFile()
(	GDALRasterAttributeTableH 	hRAT	 )

;; --------------------------------------------------------

GDALRasterAttributeTableH GDALRATClone


Copy Raster Attribute Table.

This function is the same as the C++ method GDALRasterAttributeTable::Clone()
(	GDALRasterAttributeTableH 	hRAT	 )

;; --------------------------------------------------------

CPLErr GDALRATCreateColumn


Create new column.

This function is the same as the C++ method GDALRasterAttributeTable::CreateColumn()
(	GDALRasterAttributeTableH 	hRAT,
		const char * 	pszFieldName,
		GDALRATFieldType 	eFieldType,
		GDALRATFieldUsage 	eFieldUsage
	)

;; --------------------------------------------------------

void GDALRATDumpReadable


Dump RAT in readable form.

This function is the same as the C++ method GDALRasterAttributeTable::DumpReadable()
(	GDALRasterAttributeTableH 	hRAT,
		FILE * 	fp
	)

;; --------------------------------------------------------

int GDALRATGetColOfUsage


Fetch column index for given usage.

This function is the same as the C++ method GDALRasterAttributeTable::GetColOfUsage()
(	GDALRasterAttributeTableH 	hRAT,
		GDALRATFieldUsage 	eUsage
	)

;; --------------------------------------------------------

int GDALRATGetColumnCount


Fetch table column count.

This function is the same as the C++ method GDALRasterAttributeTable::GetColumnCount()
(	GDALRasterAttributeTableH 	hRAT	 )

;; --------------------------------------------------------

int GDALRATGetLinearBinning


Get linear binning information.

This function is the same as the C++ method GDALRasterAttributeTable::GetLinearBinning()
(	GDALRasterAttributeTableH 	hRAT,
		double * 	pdfRow0Min,
		double * 	pdfBinSize
	)

;; --------------------------------------------------------

const char* GDALRATGetNameOfCol


Fetch name of indicated column.

This function is the same as the C++ method GDALRasterAttributeTable::GetNameOfCol()
(	GDALRasterAttributeTableH 	hRAT,
		int 	iCol
	)

;; --------------------------------------------------------

int GDALRATGetRowCount


Fetch row count.

This function is the same as the C++ method GDALRasterAttributeTable::GetRowCount()
(	GDALRasterAttributeTableH 	hRAT	 )

;; --------------------------------------------------------

int GDALRATGetRowOfValue


Get row for pixel value.

This function is the same as the C++ method GDALRasterAttributeTable::GetRowOfValue()
(	GDALRasterAttributeTableH 	hRAT,
		double 	dfValue
	)

;; --------------------------------------------------------

GDALRATFieldType GDALRATGetTypeOfCol


Fetch column type.

This function is the same as the C++ method GDALRasterAttributeTable::GetTypeOfCol()
(	GDALRasterAttributeTableH 	hRAT,
		int 	iCol
	)

;; --------------------------------------------------------

GDALRATFieldUsage GDALRATGetUsageOfCol


Fetch column usage value.

This function is the same as the C++ method GDALRasterAttributeTable::GetUsageOfColetNameOfCol()
(	GDALRasterAttributeTableH 	hRAT,
		int 	iCol
	)

;; --------------------------------------------------------

double GDALRATGetValueAsDouble


Fetch field value as a double.

This function is the same as the C++ method GDALRasterAttributeTable::GetValueAsDouble()
(	GDALRasterAttributeTableH 	hRAT,
		int 	iRow,
		int 	iField
	)

;; --------------------------------------------------------

int GDALRATGetValueAsInt


Fetch field value as a integer.

This function is the same as the C++ method GDALRasterAttributeTable::GetValueAsInt()
(	GDALRasterAttributeTableH 	hRAT,
		int 	iRow,
		int 	iField
	)

;; --------------------------------------------------------

const char* GDALRATGetValueAsString


Fetch field value as a string.

This function is the same as the C++ method GDALRasterAttributeTable::GetValueAsString()
(	GDALRasterAttributeTableH 	hRAT,
		int 	iRow,
		int 	iField
	)

;; --------------------------------------------------------

CPLErr GDALRATInitializeFromColorTable


Initialize from color table.

This function is the same as the C++ method GDALRasterAttributeTable::InitializeFromColorTable()
(	GDALRasterAttributeTableH 	hRAT,
		GDALColorTableH 	hCT
	)

;; --------------------------------------------------------

CPLErr GDALRATSetLinearBinning


Set linear binning information.

This function is the same as the C++ method GDALRasterAttributeTable::SetLinearBinning()
(	GDALRasterAttributeTableH 	hRAT,
		double 	dfRow0Min,
		double 	dfBinSize
	)

;; --------------------------------------------------------

void GDALRATSetRowCount


Set row count.

This function is the same as the C++ method GDALRasterAttributeTable::SetRowCount()
(	GDALRasterAttributeTableH 	hRAT,
		int 	nNewCount
	)

;; --------------------------------------------------------

void GDALRATSetValueAsDouble


Set field value from double.

This function is the same as the C++ method GDALRasterAttributeTable::SetValue()
(	GDALRasterAttributeTableH 	hRAT,
		int 	iRow,
		int 	iField,
		double 	dfValue
	)

;; --------------------------------------------------------

void GDALRATSetValueAsInt


Set field value from integer.

This function is the same as the C++ method GDALRasterAttributeTable::SetValue()
(	GDALRasterAttributeTableH 	hRAT,
		int 	iRow,
		int 	iField,
		int 	nValue
	)

;; --------------------------------------------------------

void GDALRATSetValueAsString


Set field value from string.

This function is the same as the C++ method GDALRasterAttributeTable::SetValue()
(	GDALRasterAttributeTableH 	hRAT,
		int 	iRow,
		int 	iField,
		const char * 	pszValue
	)

;; --------------------------------------------------------

GDALColorTableH GDALRATTranslateToColorTable


Translate to a color table.

This function is the same as the C++ method GDALRasterAttributeTable::TranslateToColorTable()
(	GDALRasterAttributeTableH 	hRAT,
		int 	nEntryCount
	)

;; --------------------------------------------------------

CPLErr GDALRATValuesIOAsDouble


Read or Write a block of doubles to/from the Attribute Table.

This function is the same as the C++ method GDALRasterAttributeTable::ValuesIO()
(	GDALRasterAttributeTableH 	hRAT,
		GDALRWFlag 	eRWFlag,
		int 	iField,
		int 	iStartRow,
		int 	iLength,
		double * 	pdfData
	)

;; --------------------------------------------------------

CPLErr GDALRATValuesIOAsInteger


Read or Write a block of ints to/from the Attribute Table.

This function is the same as the C++ method GDALRasterAttributeTable::ValuesIO()
(	GDALRasterAttributeTableH 	hRAT,
		GDALRWFlag 	eRWFlag,
		int 	iField,
		int 	iStartRow,
		int 	iLength,
		int * 	pnData
	)

;; --------------------------------------------------------

CPLErr GDALRATValuesIOAsString


Read or Write a block of strings to/from the Attribute Table.

This function is the same as the C++ method GDALRasterAttributeTable::ValuesIO()
(	GDALRasterAttributeTableH 	hRAT,
		GDALRWFlag 	eRWFlag,
		int 	iField,
		int 	iStartRow,
		int 	iLength,
		char ** 	papszStrList
	)

;; --------------------------------------------------------

int GDALReadWorldFile


Read ESRI world file.

 This function reads an ESRI style world file, and formats a
 geotransform from its contents. It does the same as
 GDALLoadWorldFile() function, but it will form the filename for the
 worldfile from the filename of the raster file referred and the
 suggested extension. If no extension is provided, the code will
 internally try the unix style and windows style world file extensions
 (eg. for .tif these would be .tfw and .tifw).

The world file contains an affine transformation with the parameters in a different order than in a geotransform array.
 geotransform[1] : width of pixel
 geotransform[4] : rotational coefficient, zero for north up images.
 geotransform[2] : rotational coefficient, zero for north up images.
 geotransform[5] : height of pixel (but negative)
 geotransform[0] + 0.5 * geotransform[1] + 0.5 * geotransform[2] : x offset to center of top left pixel.
 geotransform[3] + 0.5 * geotransform[4] + 0.5 * geotransform[5] : y offset to center of top left pixel.
Parameters:	pszBaseFilename 	the target raster file.
	pszExtension 	the extension to use (ie. \".wld\") or NULL to derive it from the pszBaseFilename
	padfGeoTransform 	the six double array into which the geotransformation should be placed.

@return{TRUE on success or FALSE on failure.
(	const char * 	pszBaseFilename,
		const char * 	pszExtension,
		double * 	padfGeoTransform
	)

;; --------------------------------------------------------

CPLErr GDALRegenerateOverviews


Generate downsampled overviews.

 This function will generate one or more overview images from a base
 image using the requested downsampling algorithm. It's primary use is
 for generating overviews via GDALDataset::BuildOverviews(), but it
 can also be used to generate downsampled images in one file from
 another outside the overview architecture.

The output bands need to exist in advance.

The full set of resampling algorithms is documented in GDALDataset::BuildOverviews().

 This function will honour properly NODATA_VALUES tuples (special
 dataset metadata) so that only a given RGB triplet (in case of a RGB
 image) will be considered as the nodata value and not each value of
 the triplet independantly per band.

Parameters:	hSrcBand 	the source (base level) band.
	nOverviewCount 	the number of downsampled bands being generated.
	pahOvrBands 	the list of downsampled bands to be generated.
	pszResampling 	Resampling algorithm (eg. \"AVERAGE\").
	pfnProgress 	progress report function.
	pProgressData 	progress function callback data.

@return{CE_None on success or CE_Failure on failure.
(	GDALRasterBandH 	hSrcBand,
		int 	nOverviewCount,
		GDALRasterBandH * 	pahOvrBands,
		const char * 	pszResampling,
		GDALProgressFunc 	pfnProgress,
		void * 	pProgressData
	)

;; --------------------------------------------------------

int GDALRegisterDriver


Register a driver for use.
See also:
GDALDriverManager::GetRegisterDriver()
(	GDALDriverH 	hDriver	 )

;; --------------------------------------------------------

CPLErr GDALRenameDataset


Rename a dataset.
See also:
GDALDriver::Rename()
void GDALSetCacheMax 	(	int 	nNewSizeInBytes	 )


Set maximum cache memory.

 This function sets the maximum amount of memory that GDAL is
 permitted to use for GDALRasterBlock caching. The unit of the value
 is bytes.

The maximum value is 2GB, due to the use of a signed 32 bit integer. Use GDALSetCacheMax64() to be able to set a higher value.
Parameters:	nNewSizeInBytes 	the maximum number of bytes for caching.
(	GDALDriverH 	hDriver,
		const char * 	pszNewName,
		const char * 	pszOldName
	)

;; --------------------------------------------------------

void GDALSetCacheMax64


Set maximum cache memory.

 This function sets the maximum amount of memory that GDAL is
 permitted to use for GDALRasterBlock caching. The unit of the value
 is bytes.

 Note: On 32 bit platforms, the maximum amount of memory that can be
 addressed by a process might be 2 GB or 3 GB, depending on the
 operating system capabilities. This function will not make any
 attempt to check the consistency of the passed value with the
 effective capabilities of the OS.

Parameters:	nNewSizeInBytes 	the maximum number of bytes for caching.

Since:
GDAL 1.8.0
(	GIntBig 	nNewSizeInBytes	 )

;; --------------------------------------------------------

void GDALSetColorEntry


Set entry in color table.

This function is the same as the C++ method GDALColorTable::SetColorEntry()
(	GDALColorTableH 	hTable,
		int 	i,
		const GDALColorEntry * 	poEntry
	)

;; --------------------------------------------------------

void GDALSetDescription


Set object description.
See also:
GDALMajorObject::SetDescription()
(	GDALMajorObjectH 	hObject,
		const char * 	pszNewDesc
	)

;; --------------------------------------------------------

CPLErr GDALSetMetadata


Set metadata.
See also:
GDALMajorObject::SetMetadata()
(	GDALMajorObjectH 	hObject,
		char ** 	papszMD,
		const char * 	pszDomain
	)

;; --------------------------------------------------------

CPLErr GDALSetMetadataItem


Set single metadata item.
See also:
GDALMajorObject::SetMetadataItem()
(	GDALMajorObjectH 	hObject,
		const char * 	pszName,
		const char * 	pszValue,
		const char * 	pszDomain
	)

;; --------------------------------------------------------

void GDALSwapWords


Byte swap words in-place.

 This function will byte swap a set of 2, 4 or 8 byte words \"in place\"
 in a memory array. No assumption is made that the words being swapped
 are word aligned in memory. Use the CPL_LSB and CPL_MSB macros from
 cpl_port.h to determine if the current platform is big endian or
 little endian. Use The macros like CPL_SWAP32() to byte swap single
 values without the overhead of a function call.

Parameters:	pData 	pointer to start of data buffer.
	nWordSize 	size of words being swapped in bytes. Normally 2, 4 or 8.
	nWordCount 	the number of words to be swapped in this call.
	nWordSkip 	the byte offset from the start of one word to the start of the next. For packed buffers this is the same as nWordSize.
(	void * 	pData,
		int 	nWordSize,
		int 	nWordCount,
		int 	nWordSkip
	)

;; --------------------------------------------------------

int GDALValidateCreationOptions


Validate the list of creation options that are handled by a driver.

This is a helper method primarily used by Create() and CreateCopy() to validate that the passed in list of creation options is compatible with the GDAL_DMD_CREATIONOPTIONLIST metadata item defined by some drivers.
See also:
GDALGetDriverCreationOptionList()

If the GDAL_DMD_CREATIONOPTIONLIST metadata item is not defined, this function will return TRUE. Otherwise it will check that the keys and values in the list of creation options are compatible with the capabilities declared by the GDAL_DMD_CREATIONOPTIONLIST metadata item. In case of incompatibility a (non fatal) warning will be emited and FALSE will be returned.
Parameters:	hDriver 	the handle of the driver with whom the lists of creation option must be validated
	papszCreationOptions 	the list of creation options. An array of strings, whose last element is a NULL pointer

@return{TRUE if the list of creation options is compatible with the Create() and CreateCopy() method of the driver, FALSE otherwise.
(	GDALDriverH 	hDriver,
		char ** 	papszCreationOptions
	)

;; --------------------------------------------------------

const char* GDALVersionInfo


Get runtime version information.

Available pszRequest values:
 \"VERSION_NUM\": Returns GDAL_VERSION_NUM formatted as a string. ie. \"1170\" Note: starting with GDAL 1.10, this string will be longer than 4 characters.
 \"RELEASE_DATE\": Returns GDAL_RELEASE_DATE formatted as a string. ie. \"20020416\".
 \"RELEASE_NAME\": Returns the GDAL_RELEASE_NAME. ie. \"1.1.7\"
 \"--version\": Returns one line version message suitable for use in response to --version requests. ie. \"GDAL 1.1.7, released 2002/04/16\"
 \"LICENSE\": Returns the content of the LICENSE.TXT file from the GDAL_DATA directory. Before GDAL 1.7.0, the returned string was leaking memory but this is now resolved. So the result should not been freed by the caller.
 \"BUILD_INFO\": List of NAME=VALUE pairs separated by newlines with information on build time options.
Parameters:	pszRequest 	the type of version info desired, as listed above.

@return{an internal string containing the requested information.
(	const char * 	pszRequest	 )

;; --------------------------------------------------------

int GDALWriteWorldFile


Write ESRI world file.

This function writes an ESRI style world file from the passed geotransform.

The world file contains an affine transformation with the parameters in a different order than in a geotransform array.
 geotransform[1] : width of pixel
 geotransform[4] : rotational coefficient, zero for north up images.
 geotransform[2] : rotational coefficient, zero for north up images.
 geotransform[5] : height of pixel (but negative)
 geotransform[0] + 0.5 * geotransform[1] + 0.5 * geotransform[2] : x offset to center of top left pixel.
 geotransform[3] + 0.5 * geotransform[4] + 0.5 * geotransform[5] : y offset to center of top left pixel.
Parameters:	pszBaseFilename 	the target raster file.
	pszExtension 	the extension to use (ie. \".wld\"). Must not be NULL
	padfGeoTransform 	the six double array from which the geotransformation should be read.

@return{TRUE on success or FALSE on failure.
(	const char * 	pszBaseFilename,
		const char * 	pszExtension,
		double * 	padfGeoTransform
	)

;; EOF
